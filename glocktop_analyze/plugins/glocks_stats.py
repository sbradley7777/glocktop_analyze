#!/usr/bin/python
"""
@author    : Shane Bradley
@contact   : sbradley@redhat.com
@copyright : GPLv3

* This plugin outputs the glock stat information generated by glocktop.

"""
import logging
import logging.handlers
import os.path
import locale

import glocktop_analyze
from glocktop_analyze.plugins import Plugin, Admonition
from glocktop_analyze.plugins import generate_date_graphs
from glocktop_analyze.glocks_stats import GlocksStats, GlockStat, GLOCK_TYPES
from glocktop_analyze.utilities import ColorizeConsoleText, write_to_file, tableize
from glocktop_analyze.html import generate_graph_index_page
from glocktop_analyze.html import generate_css_header, generate_table
from glocktop_analyze.html import generate_footer

class GSStats(Plugin):
    OPTIONS = [("high_glocks_count_total",
                "An integer value for a threshold for total number of glocks on all filesystems.",
                1000000)]

    def __init__(self, snapshots, path_to_output_dir, options):
        self.__gs_glocks_total_lowest = None
        self.__gs_glocks_total_highest = None
        snapshots_with_stats = []
        for snapshot in snapshots:
            if (not snapshot.get_glocks_stats() == None):
                snapshots_with_stats.append(snapshot)
        Plugin.__init__(self, "glocks_stats", "The stats for the different glock types and states.",
                        snapshots_with_stats, "Glocks Stats", path_to_output_dir,
                        options)

    def __generate_graphs_by_glock_type(self, png_format=False):
        path_to_output_dir = os.path.join(os.path.join(self.get_path_to_output_dir(),
                                                       self.get_filesystem_name()), "graphs")
        if (self.get_snapshots()):
            path_to_image_files = []
            snapshot_date_time = []
            # This is graphing the states for differnt glock types. X is time, Y is
            # one of 8 glock states.
            for gtype in glocktop_analyze.glocks_stats.GLOCK_TYPES:
                glock_states_stats = {}
                for snapshot in self.get_snapshots():
                    glocks_stats = snapshot.get_glocks_stats()
                    if (not snapshot.get_date_time() in snapshot_date_time):
                        snapshot_date_time.append(snapshot.get_date_time())
                    states_stats = glocks_stats.get_stats_by_type(gtype)
                    for key in states_stats.keys():
                        if (glock_states_stats.has_key(key)):
                            glock_states_stats[key].append(states_stats.get(key))
                        else:
                            glock_states_stats[key] = [states_stats.get(key)]
                path_to_image_files += generate_date_graphs(path_to_output_dir,
                                                            snapshot_date_time,
                                                            glock_states_stats,
                                                            "%s - %s" %(self.get_filesystem_name(), gtype),
                                                            "Time of Snapshots", "Glock States",
                                                            png_format=png_format)
            return path_to_image_files

    def __generate_graphs_by_glock_state(self, png_format=False):
        path_to_output_dir = os.path.join(os.path.join(self.get_path_to_output_dir(),
                                                       self.get_filesystem_name()), "graphs")
        if (self.get_snapshots()):
            path_to_image_files = []
            snapshot_date_time = []
            # This is graphing the states for differnt glock states. X is time, Y is
            # one of 7 glock types.
            for gstate in glocktop_analyze.glocks_stats.GLOCK_STATES:
                glock_types_stats = {}
                for snapshot in self.get_snapshots():
                    glocks_stats = snapshot.get_glocks_stats()
                    if (not snapshot.get_date_time() in snapshot_date_time):
                        snapshot_date_time.append(snapshot.get_date_time())
                    gtypes_stats = glocks_stats.get_stats_by_state(gstate)
                    for key in gtypes_stats.keys():
                        if (glock_types_stats.has_key(key)):
                            glock_types_stats[key].append(gtypes_stats.get(key))
                        else:
                            glock_types_stats[key] = [gtypes_stats.get(key)]
                path_to_image_files += generate_date_graphs(path_to_output_dir,
                                                            snapshot_date_time,
                                                            glock_types_stats,
                                                            "%s - %s" %(self.get_filesystem_name(), gstate),
                                                            "Time of Snapshots", "Glock Types",
                                                            png_format=png_format)
            return path_to_image_files

    def __get_glocks_count_table(self):
        try:
            locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
        except locale.Error:
            # Set default
            locale.setlocale(locale.LC_ALL, '')

        glocks_stats_totals_table = []
        glocks_count = locale.format('%d',
                                     self.__gs_glocks_total_lowest.get_glocks_count(),
                                     True)
        glocks_stats_totals_table.append([self.get_hostname(),
                                          self.__gs_glocks_total_lowest.get_filesystem_name(),
                                          self.__gs_glocks_total_lowest.get_date_time(),
                                          glocks_count])
        glocks_count = locale.format('%d',
                                     self.__gs_glocks_total_highest.get_glocks_count(),
                                     True)
        glocks_stats_totals_table.append([self.get_hostname(),
                                          self.__gs_glocks_total_highest.get_filesystem_name(),
                                          self.__gs_glocks_total_highest.get_date_time(),
                                          glocks_count])
        return glocks_stats_totals_table

    def __get_text(self, colorize=False):
        summary = ""
        if ((not self.__gs_glocks_total_lowest == None) or
            (not self.__gs_glocks_total_highest == None)):
            glocks_stats_totals_table = self.__get_glocks_count_table()
            if (len(glocks_stats_totals_table)):
                summary += "The lowest and highest total count of glocks in all the snapshots.\n"
                summary += "%s\n\n" %(tableize(glocks_stats_totals_table,
                                               ["Hostname", "Filesystem", "Glock Total Count", "Time Occurred"],
                                               colorize=colorize).strip())
        for snapshot in self.get_snapshots():
            glocks_stats = snapshot.get_glocks_stats()
            formatted_table = tableize(glocks_stats.get_table(), ["Glock States"] +
                                       glocktop_analyze.glocks_stats.GLOCK_STATES, colorize=colorize).rstrip()
            if (colorize):
                summary += "Glock stats at %s for filesystem: " %(ColorizeConsoleText.orange(
                    glocks_stats.get_date_time().strftime("%Y-%m-%d %H:%M:%S")))
                summary += "%s\n%s\n\n" %(ColorizeConsoleText.orange(
                    self.get_filesystem_name()), formatted_table)
            else:
                 summary += "Glock stats at %s for filesystem: " %(glocks_stats.get_date_time().strftime("%Y-%m-%d %H:%M:%S"))
                 summary += "%s\n%s\n\n" %(self.get_filesystem_name(), formatted_table)
        if (summary):
            return "%s: %s\n\n%s\n" %(self.get_title(), self.get_description(), summary.strip())
        return ""

    def analyze(self):
        for snapshot in self.get_snapshots():
            glocks_stats = snapshot.get_glocks_stats()
            formatted_table = tableize(glocks_stats.get_table(), ["Glock States"] +
                                       glocktop_analyze.glocks_stats.GLOCK_TYPES, colorize=True).rstrip()

            if (self.__gs_glocks_total_lowest == None):
                self.__gs_glocks_total_lowest = glocks_stats
            elif (glocks_stats.get_glocks_count() <= self.__gs_glocks_total_lowest.get_glocks_count()):
                self.__gs_glocks_total_lowest = glocks_stats
            if (self.__gs_glocks_total_highest == None):
                self.__gs_glocks_total_highest = glocks_stats
            elif (glocks_stats.get_glocks_count() >= self.__gs_glocks_total_highest.get_glocks_count()):
                self.__gs_glocks_total_highest = glocks_stats

        if (not self.__gs_glocks_total_highest == None):
            if (self.__gs_glocks_total_highest.get_glocks_count() >
                self.get_option("high_glocks_count_total")):
                try:
                    locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
                except locale.Error:
                    # Set default
                    locale.setlocale(locale.LC_ALL, '')
                high_glocks_count_total_comma = locale.format('%d', self.get_option("high_glocks_count_total"), True)
                # Call filesystem "all filesystems" since glocks stats is for
                # all filesystems and do not want duplicates.
                warning_msg =  "The number of total glocks on a snaphot of ALL gfs2 filesystem "
                warning_msg += "exceeded: %s." %(high_glocks_count_total_comma)
                self.add_warning(Admonition(snapshot.get_hostname(), "all filesystems", "Glocks",
                                            warning_msg,
                                            "https://access.redhat.com/solutions/1603713"))

    def console(self):
        summary = self.__get_text(colorize=True)
        if (summary):
            print "%s\n" %(summary.rstrip())

    def write(self, html_format=False):
        wdata = ""
        path_to_output_file = ""

        if (not html_format):
            filename = "%s.txt" %(self.get_title().lower().replace(" - ", "-").replace(" ", "_"))
            path_to_output_file = os.path.join(os.path.join(self.get_path_to_output_dir(),
                                                            self.get_filesystem_name()), filename)
            wdata = self.__get_text(colorize=False)
        else:
            bdata = ""
            filename = "%s.html" %(self.get_title().lower().replace(" - ", "-").replace(" ", "_"))
            path_to_output_file = os.path.join(os.path.join(self.get_path_to_output_dir(),
                                                            self.get_filesystem_name()), filename)
            if ((not self.__gs_glocks_total_lowest == None) or
                (not self.__gs_glocks_total_highest == None)):
                glocks_stats_totals_table = self.__get_glocks_count_table()
                if (len(glocks_stats_totals_table)):
                    title = "The lowest and highest total count of glocks in all the snapshots."
                    bdata += generate_table(glocks_stats_totals_table,
                                            ["Hostname", "Filesystem", "Glock Total Count", "Time Occurred"],
                                            title=title,
                                            description="")
            for snapshot in self.get_snapshots():
                glocks_stats = snapshot.get_glocks_stats()
                title =  "Glock stats at %s for filesystem: %s" %(glocks_stats.get_date_time().strftime("%Y-%m-%d %H:%M:%S"),
                                                                   self.get_filesystem_name())
                bdata += generate_table(glocks_stats.get_table(),
                                        ["-"] + GLOCK_TYPES,
                                        title=title,
                                        description="")
            if (bdata):
                wdata = "%s\n%s\n%s" %(generate_css_header(include_css_table=True), bdata, generate_footer())

        if (wdata):
            path_to_output_file = os.path.join(os.path.join(self.get_path_to_output_dir(),
                                                            self.get_filesystem_name()), path_to_output_file)
            if (not write_to_file(path_to_output_file, wdata, append_to_file=False, create_file=True)):
                message = "An error occurred writing to the file: %s" %(path_to_output_file)
                logging.getLogger(glocktop_analyze.MAIN_LOGGER_NAME).debug(message)

    def graph(self, png_format=False):
        if (self.get_snapshots()):
            path_to_image_files = self.__generate_graphs_by_glock_type(png_format=png_format)
            if (path_to_image_files):
                generate_graph_index_page(os.path.join(self.get_path_to_output_dir(),
                                                       self.get_filesystem_name()),
                                          path_to_image_files, "Glock Types")
            path_to_image_files = self.__generate_graphs_by_glock_state(png_format=png_format)
            if (path_to_image_files):
                generate_graph_index_page(os.path.join(self.get_path_to_output_dir(),
                                                       self.get_filesystem_name()),
                                          path_to_image_files, "Glock States")
